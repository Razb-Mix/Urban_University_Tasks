# Задача "Банковские операции":
# Необходимо создать класс Bank со следующими свойствами:
import threading
from random import randint
from time import sleep

class Bank:
    def __init__(self):
        # Атрибуты объекта:
        self.balance:int = 0 # balance - баланс банка (int)
        self.lock = threading.Lock() # lock - объект класса Lock для блокировки потоков.

    # Методы объекта:
    def deposit(self):
        # Будет совершать 100 транзакций пополнения средств.
        for transaction in range(100):
            payment: int = randint(50, 500)
            self.balance += payment # увеличение баланса на случайное целое число от 50 до 500.
            # После увеличения баланса должна выводится строка "Пополнение: <случайное число>. Баланс: <текущий баланс>".
            print(f"Пополнение: {payment}. Баланс: {self.balance}")

            if self.balance >= 500 and self.lock.locked(): # Если баланс больше или равен 500 и замок lock заблокирован
                self.lock.release()  # то разблокировать его методом release.

            # Также после всех операций поставьте ожидание в 0.001 секунды, имитируя скорость выполнения пополнения.
            sleep(0.001)

    def take(self):
        # Будет совершать 100 транзакций снятия.
        for transaction in range(100):
            withdraw: int = randint(50, 500) # случайное целое число от 50 до 500 для уменьшения баланса.
            # В начале должно выводится сообщение "Запрос на <случайное число>".
            print(f"Запрос на {withdraw}")
            # проверка: если случайное число меньше или равно текущему балансу,
            if withdraw <= self.balance:
                # то произвести снятие, уменьшив balance на соответствующее число
                self.balance -= withdraw
                # вывести на экран "Снятие: <случайное число>. Баланс: <текущий баланс>".
                print(f"Снятие: {withdraw}. Баланс: {self.balance}")
            # Если случайное число оказалось больше баланса,
            else:
                # то вывести строку "Запрос отклонён, недостаточно средств"
                print(f"Запрос отклонён, недостаточно средств")
                self.lock.acquire() # и заблокировать поток методом acquiere.

# Далее создайте объект класса Bank
bk = Bank()

# создайте 2 потока для его методов deposit и take.
# Т.к. методы принимают self, в потоки нужно передать сам объект класса Bank
th1 = threading.Thread(target=Bank.deposit, args=(bk,))
th2 = threading.Thread(target=Bank.take, args=(bk,))

# Запустите эти потоки.
th1.start()
th2.start()
th1.join()
th2.join()

# После конца работы потоков выведите строку: "Итоговый баланс: <баланс объекта Bank>".
print(f'Итоговый баланс: {bk.balance}')


# Вывод на консоль (может отличаться значениями, логика должна быть та же):
# Пополнение: 241. Баланс: 241
# Запрос на 174
# Снятие: 174. Баланс: 67
# Пополнение: 226. Баланс: 293
# Запрос на 421
# Запрос отклонён, недостаточно средств
# Пополнение: 133. Баланс: 426
# Запрос на 422
# Снятие: 422. Баланс: 4
# Пополнение: 150. Баланс: 154
# Запрос на 207
# Запрос отклонён, недостаточно средств
# ....
# Запрос на 431
# Снятие: 431. Баланс: 276
# Запрос на 288
# Запрос отклонён, недостаточно средств
# Итоговый баланс: 276